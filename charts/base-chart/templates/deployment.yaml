# @formatter:off
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "base-chart.fullname" . }}
  labels:
{{ include "base-chart.labels" . | indent 4 }}
{{- if .Values.deploymentAnnotations }}
  annotations:
{{ toYaml .Values.deploymentAnnotations | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "base-chart.name" . }}
      release: {{ .Release.Name }}
{{- if .Values.deploymentStrategy }}
  strategy:
{{ toYaml .Values.deploymentStrategy | indent 4 }}
{{- end }}
  template:
    metadata:
      labels:
        app: {{ include "base-chart.name" . }}
        release: {{ .Release.Name }}
{{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
{{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ include "base-chart.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.extraVolumes }}
      volumes:
{{ toYaml .Values.extraVolumes | indent 8 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- if .Values.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.dnsConfig | indent 8 }}
      {{- end }}
      containers:
        - name: {{ include "base-chart.name" . }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command:
{{ toYaml .Values.command | indent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
{{ toYaml .Values.args | indent 12 }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          volumeMounts:
{{ toYaml .Values.extraVolumeMounts | indent 12 }}
          {{- end }}
          {{- if or .Values.envVars .Values.appVersionEnv .Values.envVarsMap }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          {{- if .Values.appVersionEnv }}
            - name: APP_VERSION
              value: {{ .Chart.AppVersion | quote }}
          {{- end }}
          {{- range $key, $value := $.Values.envVarsMap }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.envVars }}
{{ toYaml .Values.envVars | indent 12 }}
          {{- end }}
          {{- end }}
          {{- if .Values.envFrom }}
          envFrom:
{{ toYaml .Values.envFrom | indent 12 }}
          {{- end }}
          ports:
          {{- range $key, $value := .Values.containerPort }}
            - name: {{ $key }}
              containerPort: {{ $value }}
              protocol: TCP
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if eq .Values.livenessProbe.type "http" }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
            {{- else if eq .Values.livenessProbe.type "exec" }}
            exec:
              command:
{{ toYaml .Values.livenessProbe.execCommand | indent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.periodSeconds }}
            periodSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if eq .Values.readinessProbe.type "http" }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            {{- else if eq .Values.readinessProbe.type "exec" }}
            exec:
              command:
{{ toYaml .Values.readinessProbe.execCommand | indent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.periodSeconds }}
            periodSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
{{ toYaml . | indent 12 }}
          {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- else if or .Values.differentNodes .Values.differentAZ }}
      affinity:
        podAntiAffinity:
          {{- if .Values.differentNodes }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ include "base-chart.name" . }}
                  release: {{ .Release.Name }}
          {{- end }}
          {{- if .Values.differentAZ }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: topology.kubernetes.io/zone
                labelSelector:
                  matchLabels:
                    app: {{ include "base-chart.name" . }}
                    release: {{ .Release.Name }}
          {{- end }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
